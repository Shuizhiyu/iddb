// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package irpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// IrpcGreeterClient is the client API for IrpcGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IrpcGreeterClient interface {
	// Sends a greeting
	IrpcGreet(ctx context.Context, in *IrpcRequest, opts ...grpc.CallOption) (*IrpcReply, error)
}

type irpcGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewIrpcGreeterClient(cc grpc.ClientConnInterface) IrpcGreeterClient {
	return &irpcGreeterClient{cc}
}

func (c *irpcGreeterClient) IrpcGreet(ctx context.Context, in *IrpcRequest, opts ...grpc.CallOption) (*IrpcReply, error) {
	out := new(IrpcReply)
	err := c.cc.Invoke(ctx, "/irpc.IrpcGreeter/IrpcGreet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IrpcGreeterServer is the server API for IrpcGreeter service.
// All implementations must embed UnimplementedIrpcGreeterServer
// for forward compatibility
type IrpcGreeterServer interface {
	// Sends a greeting
	IrpcGreet(context.Context, *IrpcRequest) (*IrpcReply, error)
	mustEmbedUnimplementedIrpcGreeterServer()
}

// UnimplementedIrpcGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedIrpcGreeterServer struct {
}

func (UnimplementedIrpcGreeterServer) IrpcGreet(context.Context, *IrpcRequest) (*IrpcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IrpcGreet not implemented")
}
func (UnimplementedIrpcGreeterServer) mustEmbedUnimplementedIrpcGreeterServer() {}

// UnsafeIrpcGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IrpcGreeterServer will
// result in compilation errors.
type UnsafeIrpcGreeterServer interface {
	mustEmbedUnimplementedIrpcGreeterServer()
}

func RegisterIrpcGreeterServer(s *grpc.Server, srv IrpcGreeterServer) {
	s.RegisterService(&_IrpcGreeter_serviceDesc, srv)
}

func _IrpcGreeter_IrpcGreet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IrpcGreeterServer).IrpcGreet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/irpc.IrpcGreeter/IrpcGreet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IrpcGreeterServer).IrpcGreet(ctx, req.(*IrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IrpcGreeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "irpc.IrpcGreeter",
	HandlerType: (*IrpcGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IrpcGreet",
			Handler:    _IrpcGreeter_IrpcGreet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "irpc.proto",
}
